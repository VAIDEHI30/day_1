//function overloading
//Addition
using System;

namespace fourday
{
public class Program
{
	int a=6,b=7;
	public void Sum()
	{
		Console.WriteLine("Sum is:"+(a+b));
	}
	public void Sum(int a,int b)
	{
		Console.WriteLine("Sum is:"+(a+b));
	}
	public int Sum(int a,int b,int c)
	{
		return (a+b);
	}
	public void Sum(string a,string b)
	{
		Console.WriteLine("Sum is:"+(Convert.ToInt32(a)+Convert.ToInt32(b)));
	}
	public static void Main()
	{
		Program p=new Program();
		p.Sum();
		p.Sum(1,2);
		Console.WriteLine(p.Sum(1,2,3));
		Console.ReadLine();
	}
}
}

//multiplication
using System;

namespace fourday
{
public class Program
{
	int a=6,b=7;
	public void Mul()
	{
		Console.WriteLine("Multiplication is:"+(a*b));
	}
	public void Mul(int a,int b)
	{
		Console.WriteLine("Multiplication is:"+(a*b));
	}
	public int Mul(int a,int b,int c)
	{
		return (a*b*c);
	}
	public void Mul(string a,string b)
	{
		Console.WriteLine("Multiplication is:"+(Convert.ToInt32(a) * Convert.ToInt32(b)));
	}
	public static void Main()
	{
		Program p=new Program();
		p.Mul();
		p.Mul(1,2);
		Console.WriteLine(p.Mul(1,2,3));
		Console.ReadLine();
	}
}
}

//Operator overloading
//Addition
using System;

namespace fourday
{
	public class Sum
	{
		public int num1,num2;
		public Sum(int num1, int num2)
		{
			this.num1=num1;
			this.num2=num2;
		}	
		public static Sum operator +(Sum S1,Sum S2)
		{
			Sum S3=new Sum(0,0);
			S3.num1=S1.num1+S2.num1;
			S3.num2=S1.num2+S2.num2;
			return S3;
		}
	}
		public class Class1
		{
			public static void Main()
			{
				Sum S1=new Sum(1,2);
				Sum S2=new Sum(2,2);
				Sum S3=new Sum(0,0);
				Console.WriteLine("Values before sum Number 1: "+S3.num1+" Number 2: "+S3.num2);
				S3=S1+S2;
				Console.WriteLine("Values after sum Number 1: "+S3.num1+" Number 2: "+S3.num2);
				Console.ReadLine();
			}
		}
	
}

//Multiplication
using System;

namespace fourday
{
	public class Mul
	{
		public int num1,num2;
		public Mul(int num1, int num2)
		{
			this.num1=num1;
			this.num2=num2;
		}	
		public static Mul operator *(Mul S1,Mul S2)
		{
			Mul S3=new Mul(1,1);
			S3.num1=S1.num1*S2.num1;
			S3.num2=S1.num2*S2.num2;
			return S3;
		}
	}
		public class Class1
		{
			public static void Main()
			{
				Mul S1=new Mul(1,2);
				Mul S2=new Mul(2,2);
				Mul S3=new Mul(1,1);
				Console.WriteLine("Values before sum Number 1: "+S3.num1+" Number 2: "+S3.num2);
				S3=S1*S2;
				Console.WriteLine("Values after sum Number 1: "+S3.num1+" Number 2: "+S3.num2);
				Console.ReadLine();
			}
		}
	
}

//virtual and override class
using System;

namespace fourday
{
	public class BaseClass
	{
		public virtual void Print()
		{
			Console.WriteLine("Base Class");
		}	
	}
	public class DerivedClass:BaseClass
	{
		public override void Print()
		{
			Console.WriteLine("Derived Class");
		}	
	}
	public class Class1
		{
			public static void Main()
			{
				BaseClass baseclass=new BaseClass();
				baseclass.Print();
				
				baseclass=new DerivedClass();
				baseclass.Print();
				
				Console.ReadLine();
			}
		}
	
}

//base derived class
using System;

namespace fourday
{
	public class ClassA
	{
		
		int n1,n2; 
		public ClassA()
		{
			Console.WriteLine("Base Class constructor");
		}	
		public ClassA(int i,int j)
		{
			n1=i;
			n2=j;
			Console.WriteLine("Parameterized constructor invoked");
			Console.WriteLine("Values are "+n1+" and "+n2 );
		}
		public virtual void Swap()
		{
			Console.WriteLine("Swap Function");
		}
	}
	public class DerivedClass:ClassA
	{
		public DerivedClass():base(){}
		public DerivedClass(int i,int j):base(i,j)
		{
			base.Swap();
		}
	}
	
	public class Class3
		{
			public static void Main()
			{
				DerivedClass d=new DerivedClass();
				DerivedClass d2=new DerivedClass(10,20);
				Console.ReadLine();
			}
		}
	
}

//Create a C# program that prompts the user for three names of people and stores them in an array of Person-type objects. There will be two people of the Student type and one person of the Teacher type.To do this, create a Person class that has a Name property of type string, a constructor that receives the name as a parameter and overrides the ToString () method.Then create two more classes that inherit from the Person class, they will be called Student and Teacher. The Student class has a Study method that writes by console that the student is studying. The Teacher class will have an Explain method that writes to the console that the teacher is explaining. Remember to also create two constructors on the child classes that call the parent constructor of the Person class.End the program by reading the people (the teacher and the students) and execute the Explain and Study methods.

using System;
 
public class InheritanceObjects
{
    public static void Main(string[] args)
    {
        int total = 3;
        Person[] persons = new Person[total];
 
        for (int i = 0; i < total; i++)
        {
            if (i == 0)
            {
                persons[i] = new Teacher(Console.ReadLine());
            }
            else
            {
                persons[i] = new Student(Console.ReadLine());
            }
        }
 
        for (int i = 0; i < total; i++)
        {
            if (i == 0)
            {
               ((Teacher)persons[i]).Explain();
 
            }
            else
            {
                ((Student)persons[i]).Study();
            }
        }
    }
 
    public class Person
    {
        protected string Name { get; set; }
 
        public Person(string name)
        {
            Name = name;
        }
 
        public override string ToString()
        {
            return "Hello! My name is " + Name;
        }
 
        ~Person()
        {
            Name = string.Empty;
        }
    }
 
    public class Teacher : Person
    {
        public Teacher(string name) : base(name)
        {
            Name = name;
        }
 
        public void Explain()
        {
            Console.WriteLine("Explain");
        }
    }
 
    public class Student : Person
    {
        public Student(string name) : base(name)
        {
            Name = name;
        }
 
        public void Study()
        {
            Console.WriteLine("Study");
        }
    }
}

//
using System;
namespace fourday
{
    public class Person
    {
        public string Name { get; set; }
        public Person(string Name)
        {
            this.Name = Name;
        }
        public override string ToString()
        {
            return "Hello! My name is "+Name; 
        }
        ~Person()
        {
            Name = string.Empty;
        }
    }
    public class Teacher:Person
    {
        public Teacher(string name):base(name)
        {
            Name = name;
        }
        public void Explain()
        {
            Console.WriteLine("Explain");
        }
    }
    public class Student:Person
    {
        public Student(string name) : base(name)
        {
            Name = name;
        }
        public void Study()
        {
            Console.WriteLine("Study");
        }
    }
	public class Class4
    {
        public static void Main()
        {
            int Total = 3;
            Person[] people = new Person[Total];
            int[] a = new int[2];
            for (int i = 0; i < Total; i++)
            {
                if(i==0)
                {
                    people[i] = new Teacher(Console.ReadLine());
                }
                else
                {
                    people[i] = new Student(Console.ReadLine());
                }
            }
            for (int i = 0; i < Total; i++)
            {
                if(i==0)
                {
                    ((Teacher)people[i]).Explain();
                    float p=(float)a[0];
                }
                else
                {
                    ((Student)people[i]).Study();
                }
            }
            Console.ReadLine();
        }
    }
}
 

//
using System;
namespace today
{
class person
{
	public string name;
	public  person(string name)
	{
		this.name=name;
	}
	public override string ToString()
	{
		return name;	
	}
}
class student:person
{
	public student(string name):base(name) {}
	
	public void study()
	{
		Console.WriteLine("the student " +name+" is studying");	
	}
}
class teacher:person
{
	public teacher(string name):base(name) {}
	public void explain()
	{
		Console.WriteLine("the teacher " +name+" is explaining");
	}
}
public class main
{
	public static void Main(string[]args)
	{
		student s1=new student("ravi");
		s1.study();
		teacher t1=new teacher("seema");
		t1.explain();
		person p1=new person("person");
		Console.WriteLine(p1.ToString());
		
	}
}
}

//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Day_3
{

    class Location
    {
        double x,y;
    }
    class Shape
    {
        public override string ToString()
        {
            return String.Empty;
        }
        public double Area()
        {
            return 0;
        }
        public double Perimeter()
        {
            return 0;
        }
    }
    class Rectangle : Shape
    {
        double side1,side2;
        public Rectangle(double side1, double side2)
        {
            this.side1 = side1;
            this.side2 = side2;
        }
        public double Area()
        {
            return side1 * side2;
        }
        public double Perimeter()
        {
            return (2*(side1+side2));
        }
    }
    class Circle : Shape 
    {
        double radius;
        public Circle(double radius)
        {
            this.radius = radius;
        }
        public  double Area()
        {
            return ((22 / 7) * (radius * radius));
        }
        public double Perimeter()
        {
            return (2 * (22/7)*radius);
        }
    }
    class Class11
    {
        public static void Main()
        {
            Rectangle r = new Rectangle(3.5, 2.5);
            Console.WriteLine("Area of rectangle:" + r.Area());
            Console.WriteLine("Perimeter of rectangle:" + r.Perimeter());
            Console.WriteLine();
            Circle c = new Circle(2.5);
            Console.WriteLine("Area of Circle is: " + c.Area());
            Console.WriteLine("Perimeter of Circle is: " + c.Perimeter());
            Console.ReadLine();
        }
    }
}



//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Day_3
{

    class Location
    {
        double x,y;
    }
    class Shape
    {
        public override string ToString()
        {
            return String.Empty;
        }
        public double Area()
        {
            return 0;
        }
        public double Perimeter()
        {
            return 0;
        }
    }
    class Rectangle : Shape
    {
        double side1,side2;
        public Rectangle(double side1, double side2)
        {
            this.side1 = side1;
            this.side2 = side2;
        }
        public double Area()
        {
            return side1 * side2;
        }
        public double Perimeter()
        {
            return (2*(side1+side2));
        }
    }
    class Circle : Shape 
    {
        double radius;
        public Circle(double radius)
        {
            this.radius = radius;
        }
        public  double Area()
        {
            return ((22 / 7) * (radius * radius));
        }
        public double Perimeter()
        {
            return (2 * (22/7)*radius);
        }
    }
    class Class11
    {
        public static void Main()
        {
            Rectangle r = new Rectangle(3.5, 2.5);
            Console.WriteLine("Area of rectangle:" + r.Area());
            Console.WriteLine("Perimeter of rectangle:" + r.Perimeter());
            Console.WriteLine();
            Circle c = new Circle(2.5);
            Console.WriteLine("Area of Circle is: " + c.Area());
            Console.WriteLine("Perimeter of Circle is: " + c.Perimeter());
            Console.ReadLine();
        }
    }
}

//Create a C# program that prompts the user for three names of people and stores them in an array of Person-type objects. There will be two people of the Student type and one person of the Teacher type.To do this, create a Person class that has a Name property of type string, a constructor that receives the name as a parameter and overrides the ToString () method.Then create two more classes that inherit from the Person class, they will be called Student and Teacher. The Student class has a Study method that writes by console that the student is studying. The Teacher class will have an Explain method that writes to the console that the teacher is explaining. Remember to also create two constructors on the child classes that call the parent constructor of the Person class.End the program by reading the people (the teacher and the students) and execute the Explain and Study methods.

using System;
 
public class InheritanceObjects
{
    public static void Main(string[] args)
    {
        int total = 3;
        Person[] persons = new Person[total];
 
        for (int i = 0; i < total; i++)
        {
            if (i == 0)
            {
                persons[i] = new Teacher(Console.ReadLine());
            }
            else
            {
                persons[i] = new Student(Console.ReadLine());
            }
        }
 
        for (int i = 0; i < total; i++)
        {
            if (i == 0)
            {
               ((Teacher)persons[i]).Explain();
 
            }
            else
            {
                ((Student)persons[i]).Study();
            }
        }
    }
 
    public class Person
    {
        protected string Name { get; set; }
 
        public Person(string name)
        {
            Name = name;
        }
 
        public override string ToString()
        {
            return "Hello! My name is " + Name;
        }
 
        ~Person()
        {
            Name = string.Empty;
        }
    }
 
    public class Teacher : Person
    {
        public Teacher(string name) : base(name)
        {
            Name = name;
        }
 
        public void Explain()
        {
            Console.WriteLine("Explain");
        }
    }
 
    public class Student : Person
    {
        public Student(string name) : base(name)
        {
            Name = name;
        }
 
        public void Study()
        {
            Console.WriteLine("Study");
        }
    }
}

//getter and setter
using System;
namespace fourday
{
    public class Employee
    {
		private int _employeeid;     
		public int EmployeeID 
		{ 
			get{return _employeeid;} 
		   set{EmployeeID=value; }
    	}
    }
	public class Class4
    {
        public static void Main()
        {
            Console.ReadLine();
        }
    }
}
 
//Abstraction
using System;

	public class emp
	{
		private static int cnt;
	public emp()
	{
		cnt++;
	}
		public static int counter
		{
			get {return cnt;}
			
		}
	}
	
	public class class5
	{
	public static void Main()
	{
		emp e=new emp();
		emp e1=new emp();
		emp e2=new emp();
		Console.WriteLine(emp.counter);
		Console.ReadLine();
	}
}

//
using System;
namespace fourday
{
	public class Base
	{
	}
	public class Derived
	{
	
	}
	public class class5
	{
	public static void Main()
	{
		Base b = new Base();
		Derived d = new Derived();
		if(!(d is Derived))
		{
			Console.WriteLine("BASE CLASS");	
		}
		else
		{	
		Console.WriteLine("DERIVED CLASS");
		}
			Console.ReadLine();
	}
}
}

//
using System;
namespace fourday
{
	public class Y
	{
	}
	public class Z
	{
	
	}
	public class class5
	{
	public static void Main()
	{
		object[] o=new object[5];
		o[0]=new Y();
		o[1]=new Z();
		o[2]="HELLO";
		o[3]=45.00;
		o[4]=null;
		foreach(var item in o)
		{
			string str1=item as string;
			if(str1==null)
			{Console.WriteLine(str1);}
			else
			{Console.WriteLine("Not string");}
		Console.ReadLine();
		}	
	}
}
}
